{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.146320094c164d7aff1d.hot-update.js","sources":["webpack:///./components/PreBooking.js"],"sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport Downshift from 'downshift'\r\nimport PropTypes from 'prop-types'\r\nimport deburr from 'lodash/deburr'\r\n// Material components\r\nimport Grid from '@material-ui/core/Grid'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Input from '@material-ui/core/Input'\r\nimport NativeSelect from '@material-ui/core/NativeSelect'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Paper from '@material-ui/core/Paper'\r\n// Custom components\r\nimport { CTA } from '../components/Button'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        width: 'fit-content',\r\n        maxWidth: '45rem',\r\n        margin: '0 auto',\r\n    },\r\n    heading: {\r\n        padding: '0.5rem 0'\r\n    },\r\n    formControl: {\r\n        marginBottom: '0.5rem',\r\n        width: '100%'\r\n    },\r\n    submit: {\r\n        display: 'block',\r\n        marginTop: '2rem'\r\n    },\r\n    selectEmpty: {\r\n        marginTop: '2rem',\r\n    },\r\n    container: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n    },\r\n    paper: {\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        marginTop: theme.spacing.unit,\r\n        left: 0,\r\n        right: 0,\r\n    },\r\n}))\r\nconst suggestions = [\r\n    { label: 'Advancetown' },\r\n    { label: 'Arundel' },\r\n    { label: 'Ashmore' },\r\n    { label: 'Benowa' },\r\n    { label: 'Biggera Waters' },\r\n    { label: 'Bilinga' },\r\n    { label: 'Broadbeach' },\r\n    { label: 'Bundall' },\r\n    { label: 'Burleigh Heads' },\r\n    { label: 'Burleigh Waters' },\r\n    { label: 'Carrara' },\r\n    { label: 'Chevron Island' },\r\n    { label: 'Clear Island Waters' },\r\n    { label: 'Coolangatta' },\r\n    { label: 'Coombabah' },\r\n    { label: 'Currumbin' },\r\n    { label: 'Currumbin Waters' },\r\n    { label: 'Currumbin Valley' },\r\n    { label: 'Elanora' },\r\n    { label: 'Gaven' },\r\n    { label: 'Helensvale' },\r\n    { label: 'Highland Park' },\r\n    { label: 'Hollywell' },\r\n    { label: 'Hope Island' },\r\n    { label: 'Isle of Capri' },\r\n    { label: 'Jacobs Well' },\r\n    { label: 'Kirra' },\r\n    { label: 'Labrador' },\r\n    { label: 'Main Beach' },\r\n    { label: 'Maudsland' },\r\n    { label: 'Mermaid Beach' },\r\n    { label: 'Mermaid Waters' },\r\n    { label: 'Merrimac' },\r\n    { label: 'Molendinar' },\r\n    { label: 'Mudgeeraba' },\r\n    { label: 'Nerang' },\r\n    { label: 'Nobbys Beach' },\r\n    { label: 'Ormeau' },\r\n    { label: 'Oxenford' },\r\n    { label: 'Pacific Pines' },\r\n    { label: 'Palm Beach' },\r\n    { label: 'Paradise Point' },\r\n    { label: 'Parkwood' },\r\n    { label: 'Pimpama' },\r\n    { label: 'Reedy Creek' },\r\n    { label: 'Robina' },\r\n    { label: 'Runaway Bay' },\r\n    { label: 'Sanctuary Cove' },\r\n    { label: 'Southport' },\r\n    { label: 'Surfers Paradise' },\r\n    { label: 'Tallai' },\r\n    { label: 'Tallebudgera' },\r\n    { label: 'Tugun' },\r\n    { label: 'Varsity Lakes' },\r\n    { label: 'Worongary' },\r\n    { label: 'Miami' },\r\n    { label: 'Miami' },\r\n    { label: 'Miami' },\r\n    { label: 'Miami' },\r\n]\r\n\r\nfunction renderInput(inputProps) {\r\n    const { InputProps, classes, ref, label, name, id, value, autoComplete, ...other } = inputProps\r\n    return (\r\n        <FormControl className={classes.formControl}>\r\n            <InputLabel htmlFor={name}>{label}</InputLabel>\r\n            <Input autoComplete='__nope'\r\n                name={name} \r\n                id={id} \r\n                value={value} \r\n                inputRef={ref} \r\n                classes={{\r\n                    root: classes.inputRoot,\r\n                    input: classes.inputInput,\r\n                }} \r\n                {...InputProps}\r\n            />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nfunction renderSuggestion({ suggestion, index, itemProps, highlightedIndex, selectedItem }) {\r\n    const isHighlighted = highlightedIndex === index;\r\n    const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\r\n    return (\r\n        <MenuItem\r\n            {...itemProps}\r\n            key={suggestion.label}\r\n            selected={isHighlighted}\r\n            component=\"div\"\r\n            style={{\r\n                fontWeight: isSelected ? 500 : 400,\r\n            }}\r\n        >\r\n            {suggestion.label}\r\n        </MenuItem>\r\n    );\r\n}\r\nrenderSuggestion.propTypes = {\r\n    highlightedIndex: PropTypes.number,\r\n    index: PropTypes.number,\r\n    itemProps: PropTypes.object,\r\n    selectedItem: PropTypes.string,\r\n    suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\r\n};\r\n\r\nfunction getSuggestions(value) {\r\n    const inputValue = deburr(value.trim()).toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    let count = 0;\r\n    return inputLength === 0\r\n        ? []\r\n        : suggestions.filter(suggestion => {\r\n            const keep =\r\n                count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n            if (keep) {\r\n                count += 1;\r\n            }\r\n            return keep;\r\n        });\r\n}\r\n\r\nexport default function PreBooking() {\r\n    const classes = useStyles()\r\n    const [values, setValues] = React.useState({\r\n        name: '',\r\n        email: '',\r\n        suburb: '',\r\n        service: 10,\r\n        bedrooms: 1,\r\n        bathrooms: 1\r\n\r\n    })\r\n    React.useEffect(() => {\r\n        setValues({\r\n            ...values,\r\n        })\r\n    }, [])\r\n    const handleChange = (name, email, suburb, service, bedrooms, bathrooms) => event => {\r\n        setValues({\r\n            ...values,\r\n            [name]: event.target.value,\r\n            [email]: event.target.value,\r\n            [suburb]: event.target.value,\r\n            [service]: event.target.value,\r\n            [bedrooms]: event.target.value,\r\n            [bathrooms]: event.target.value\r\n        });\r\n    }\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <Typography variant='h4' component='p' className={classes.heading}>\r\n                    You click. We clean. It's that simple.\r\n                </Typography>\r\n                <form autoComplete='__nope'>\r\n                    <Grid container spacing={16}>\r\n                        <Grid item xs={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor='name'>Name</InputLabel>\r\n                                <Input name='name' id='name' value={values.name} onChange={handleChange('name')} />\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor='email'>Email</InputLabel>\r\n                                <Input name='email' type='email' id=\"email\" value={values.email} onChange={handleChange('email')} />\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Downshift id=\"downshift\">\r\n                                {({\r\n                                    getInputProps,\r\n                                    getItemProps,\r\n                                    getMenuProps,\r\n                                    highlightedIndex,\r\n                                    inputValue,\r\n                                    isOpen,\r\n                                    selectedItem,\r\n                                }) => (\r\n                                        <div className={classes.container}>\r\n                                            {renderInput({\r\n                                                fullWidth: true,\r\n                                                name: 'suburb',\r\n                                                id: 'suburb',\r\n                                                value: '',\r\n                                                classes,\r\n                                                label: 'Suburb',\r\n                                                autoComplete: '__nope',\r\n                                                InputProps: getInputProps({\r\n                                                }),\r\n                                            })}\r\n                                            <div {...getMenuProps()}>\r\n                                                {isOpen ? (\r\n                                                    <Paper className={classes.paper} square>\r\n                                                        {getSuggestions(inputValue).map((suggestion, index) =>\r\n                                                            renderSuggestion({\r\n                                                                suggestion,\r\n                                                                index,\r\n                                                                itemProps: getItemProps({ item: suggestion.label }),\r\n                                                                highlightedIndex,\r\n                                                                selectedItem,\r\n                                                            }),\r\n                                                        )}\r\n                                                    </Paper>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                            </Downshift>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"service\">Type of Service</InputLabel>\r\n                                <Select\r\n                                    value={values.service}\r\n                                    onChange={handleChange('service')}\r\n                                    input={<Input name=\"service\" id=\"service\" />}\r\n                                    displayEmpty\r\n                                    name=\"service\"\r\n                                    className={classes.selectEmpty}\r\n                                >\r\n                                    <MenuItem value={10}>One Time</MenuItem>\r\n                                    <MenuItem value={20}>Weekly</MenuItem>\r\n                                    <MenuItem value={30}>Fortnightly</MenuItem>\r\n                                    <MenuItem value={40}>Every 4 Weeks</MenuItem>\r\n                                    <MenuItem value={50}>Bond Cleaning</MenuItem>\r\n                                    <MenuItem value={60}>Spring Cleaning</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel shrink htmlFor=\"bedrooms\">Bedrooms</InputLabel>\r\n                                <Select\r\n                                    value={values.bedrooms}\r\n                                    onChange={handleChange('bedrooms')}\r\n                                    input={<Input name=\"bedrooms\" id=\"bedrooms\" />}\r\n                                    displayEmpty\r\n                                    name=\"bedrooms\"\r\n                                    className={classes.selectEmpty}\r\n                                >\r\n                                    <MenuItem value={1}>1</MenuItem>\r\n                                    <MenuItem value={2}>2</MenuItem>\r\n                                    <MenuItem value={3}>3</MenuItem>\r\n                                    <MenuItem value={4}>4</MenuItem>\r\n                                    <MenuItem value={5}>5</MenuItem>\r\n                                    <MenuItem value={6}>6</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel shrink htmlFor=\"bathrooms\">Bathrooms</InputLabel>\r\n                                <Select\r\n                                    value={values.bathrooms}\r\n                                    onChange={handleChange('bathrooms')}\r\n                                    input={<Input name=\"bathrooms\" id=\"bathrooms\" />}\r\n                                    displayEmpty\r\n                                    name=\"bathrooms\"\r\n                                    className={classes.selectEmpty}\r\n                                >\r\n                                    <MenuItem value={1}>1</MenuItem>\r\n                                    <MenuItem value={2}>2</MenuItem>\r\n                                    <MenuItem value={3}>3</MenuItem>\r\n                                    <MenuItem value={4}>4</MenuItem>\r\n                                    <MenuItem value={5}>5</MenuItem>\r\n                                    <MenuItem value={6}>6</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>                \r\n                    <CTA fullWidth size='large' className={classes.submit}>\r\n                        Get an instant quote\r\n                    </CTA>\r\n                </form>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAxBA;AAAA;AAgaxBA;AAwsourceRoot":""}